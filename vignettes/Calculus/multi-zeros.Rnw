<<results="hide",warning=FALSE,message=FALSE>>=
require(mosaic)
@

Suppose you have two such equations, corresponding to two spheres.  Then the intersection will, generically, lie on a manifold of dimension 1: a curve.
<<cache=TRUE>>=
s2 <- findZeros( x^2 + y^2 + z^2 - 10 ~ x&y&z, 
                 (x-2)^2 + (y-1)^2 + z^2 - 8 ~ x&y&z, 
                near=0, within=10, nearest=200)
cloud( z ~ x+y, data=s2, pch=19)
@

With three equations, corresponding to three spheres, the result will be isolated points.  In this case, there are two
solutions.
<<cache=TRUE>>=
s3 <- findZeros(x^2 + y^2 + z^2 - 10 ~ x&y&z, 
                 (x-2)^2 + (y-1)^2 + z^2 - 8 ~ x&y&z, 
                (x+1)^2+(y-2)^2+(z-1)^2-9~x&y&z,
                near=0, within=10, nearest=20)
cloud( z ~ x+y, data=s3, pch=19)

@

To visualize how all three of these intersections interact, consider the following plot:
<<chache=TRUE>>=
s <- rbind(cbind(s1, group=1),
           cbind(s2, group=2),
           cbind(s3, group=3))

cloud( z ~ x+y, data=s, groups=group, pch=19, cex=.3)


@

\subsection{Example: GPS}

The function \function{findZeros()} allows you to specify fewer equations than variables.  This results in multiple sets of solutions.  Consider the methods of using GPS satellites to determine a hiker's position on the Earth.  With information from only one satellite, the hiker knows only that they exist somewhere on a sphere of radius d from that satellite.  Say satellite A is at position (12480, 483901, 1239) and is a distance of 25 away from the hiker.  Then the hiker must exist somewhere in the sphere determined by

<<>>=
Z = findZeros((x-12480)^2+(y- 483901)^2+(z-1239)^2 - 25 ~ x&y&z, near=c(12480, 483901, 1239), nearest=1000, within=25)
@

Now, by adding information from a second satellite, we can narrow down the search for the position of the hikers.

<<>>=
Z2 = findZeros((x-12485)^2+(y- 483900)^2+(z-1243)^2 - 30 ~ x&y&z, near=c(12480, 483901, 1239), nearest=5000, within=25)
#cloudData = rbind(cbind(Z, name=rep("satA", length(rows(Z)))), cbind(Z2, name=rep("satB", length(rows(Z2)))))
#cloud(z~x+y, data=cloudData)
Z3 = findZeros((x-12485)^2+(y- 483900)^2+(z-1243)^2 - 30 ~ x&y&z, (x-12480)^2+(y- 483901)^2+(z-1239)^2 - 25 ~ x&y&z, near=c(12480, 483901, 1239), nearest=5000, within=25)
@

Now the hiker needs to gain information from another satellite to correctly determine their current postion.  Say this satellite is
